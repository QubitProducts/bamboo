#gateway cfg
global
        #log /dev/log    local0
        #log /dev/log    local1 notice
        log 127.0.0.1    local0 info
        log /dev/stdout  local0 info
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        maxconn 50000
        # process number
        nbproc {{ if (le .NBProc 1) }} 1 {{ else }} {{ .NBProc }} {{ end }}

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL).
        # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000

        ## centos 7
        errorfile 400 /usr/share/haproxy/400.http
        errorfile 403 /usr/share/haproxy/403.http
        errorfile 408 /usr/share/haproxy/408.http
        errorfile 500 /usr/share/haproxy/500.http
        errorfile 502 /usr/share/haproxy/502.http
        errorfile 503 /usr/share/haproxy/503.http
        errorfile 504 /usr/share/haproxy/504.http

# dataman stats port
listen stats :9000
    mode http
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    stats auth dataman:dataman

# Template Customization
# http endpoints using 80
frontend http-in
        bind *:80
        {{ range $index, $app := .Apps }} 
# http endpoints {{ $app.Env.BB_DM_HTTP_ENDPOINTS }} endpoints {{ $app.Env.BB_DM_ENDPOINTS }}
            {{ if and $app.Env.BB_DM_HTTP_ENDPOINTS $app.Env.BB_DM_ENDPOINTS }}
                {{ $endpoints := Split $app.Env.BB_DM_ENDPOINTS "," }}
                {{ range $httpIdxStr := Split $app.Env.BB_DM_HTTP_ENDPOINTS "," }}
                    {{ $httpIdx := Atoi $httpIdxStr }}
                    {{ $httpEndpoint := index $endpoints $httpIdx }}
                    {{ $endpointSlices := Split $httpEndpoint ":" }}
                    {{ $svcType := index $endpointSlices 0 }}
                    {{ $protocol := index $endpointSlices 1 }}
                    {{ $uri := index $endpointSlices 2 }}
                    {{ $port := index $endpointSlices 3 }}
# svcType: {{ $svcType }} proto: {{ $protocol }} uri: {{ $uri }} port: {{ $port }}
                    {{ if not (eq $svcType "pub") }} 
#private service, skipped
                    {{ else if and (not (eq $uri "nil")) (eq $port "80") }} 
#pub:http:uri:80, acl
        acl {{ $app.EscapedId }}-aclrule hdr(host) -i {{ $uri }} 
        use_backend {{ $app.EscapedId }}-{{ $uri }}-cluster if {{ $app.EscapedId }}-aclrule
                    {{ end }}
                {{ end }}
            {{ end }}
        {{ end }}

        {{ range $index, $app := .Apps }} 
            {{ $tasks := .Tasks }}
            {{ if and $app.Env.BB_DM_HTTP_ENDPOINTS $app.Env.BB_DM_ENDPOINTS }}
                {{ $endpoints := Split $app.Env.BB_DM_ENDPOINTS "," }}
                {{ range $httpIdxStr := Split $app.Env.BB_DM_HTTP_ENDPOINTS "," }}
                    {{ $httpIdx := Atoi $httpIdxStr }}
                    {{ $httpEndpoint := index $endpoints $httpIdx }}
                    {{ $endpointSlices := Split $httpEndpoint ":" }}
                    {{ $svcType := index $endpointSlices 0 }}
                    {{ $protocol := index $endpointSlices 1 }}
                    {{ $uri := index $endpointSlices 2 }}
                    {{ $port := index $endpointSlices 3 }}
# len {{ len $endpointSlices }}
                    {{ $eslen := (len $endpointSlices) }}
# svcType: {{ $svcType }} proto: {{ $protocol }} uri: {{ $uri }} port: {{ $port }}
                    {{ if not (eq $svcType "pub") }} 
#private service, skipped
                    {{ else if and (not (eq $uri "nil")) (eq $port "80") }} 
#pub:http:uri:80, backend
        backend {{ $app.EscapedId }}-{{ $uri }}-cluster
                        {{ if $app.HealthCheckPath }}
        option httpchk GET {{ $app.HealthCheckPath }}
                        {{ end }}
        balance roundrobin
        cookie DM_LB_ID insert indirect nocache
        option httpclose
        option forwardfor
                        {{ range $page, $task := $tasks }}
        server {{ $app.EscapedId }}-{{ $task.Host }}-{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $httpIdx }}{{ end }} {{ $task.Host }}:{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $httpIdx }}{{ end }} check cookie {{ $app.EscapedId }}-{{ $task.Host }}-{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $httpIdx }}{{ end }}
                        {{ end }} 
 
                    {{ end }}
            
                {{ end }}
            {{ end }}
        {{ end }}

# customized endpoints
       {{ range $index, $app := .Apps }} 
            {{ $tasks := .Tasks }}
            {{ if $app.Env.BB_DM_ENDPOINTS }}
                {{ range $tcpIdx, $endpoint := Split $app.Env.BB_DM_ENDPOINTS "," }}
                    {{ $endpointSlices := Split $endpoint ":" }}
                    {{ $svcType := index $endpointSlices 0 }}
                    {{ $protocol := index $endpointSlices 1 }}
                    {{ $uri := index $endpointSlices 2 }}
                    {{ $port := index $endpointSlices 3 }}
# len {{ len $endpointSlices }}
                    {{ $eslen := (len $endpointSlices) }}
# svcType: {{ $svcType }} proto: {{ $protocol }} uri: {{ $uri }} port: {{ $port }}
                    {{ if not (eq $svcType "pub") }} 
#private service, skipped
                    {{ else if and (not (eq $uri "nil")) (eq $port "80") }} 
#pub:http:uri:80, skipped
                    {{ else if  eq $protocol "http" }} 
#http endpoint
listen {{ $app.EscapedId }}-cluster-http-{{ $port }} :{{ $port }}
        mode http
        balance roundrobin
        cookie DM_LB_ID insert indirect nocache
        option httpclose
        option forwardfor
                        {{ range $page, $task := $tasks }}
        server {{ $app.EscapedId }}-{{ $task.Host }}-{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $tcpIdx }}{{ end }} {{ $task.Host }}:{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $tcpIdx }}{{ end }}  check cookie {{ $app.EscapedId }}-{{ $task.Host }}-{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $tcpIdx }}{{ end }} 
                        {{ end }}
                    {{ else if  eq $protocol "tcp" }} 
#tcp endpoint
listen {{ $app.EscapedId }}-cluster-tcp-{{ $port }} :{{ $port }}
        mode tcp
        option tcplog
        balance leastconn
                        {{ range $page, $task := $tasks }}
        server {{ $app.EscapedId }}-{{ $task.Host }}-{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $tcpIdx }}{{ end }}  {{ $task.Host }}:{{ if eq 5 $eslen }}{{ index $endpointSlices 4 }}{{ else }}{{ index $task.Ports $tcpIdx }}{{ end }}   
                        {{ end }}
                    {{ else }}
#bad endpoint
                    {{ end }}
                {{ end }}
            {{ end }}
       {{ end }}




##
## map service ports of marathon apps
## ( see https://mesosphere.github.io/marathon/docs/service-discovery-load-balancing.html#ports-assignment ))
## to haproxy frontend port
##
## {{ range $index, $app := .Apps }}
##   {{ range $serviceIndex, $servicePort := $app.ServicePorts }}
## listen {{ $app.EscapedId }}_{{ $servicePort }}
##   bind *:{{ $servicePort }}
##   mode http
##   {{ if $app.HealthCheckPath }}
##   # option httpchk GET {{ $app.HealthCheckPath }}
##   {{ end }}
##   balance leastconn
##   option forwardfor
##         {{ range $page, $task := $app.Tasks }}
##         server {{ $app.EscapedId }}-{{ $task.Host }}-{{ index $task.Ports $serviceIndex }} {{ $task.Host }}:{{ index $task.Ports $serviceIndex }} {{ if $app.HealthCheckPath }} check inter 30000 {{ end }} {{ end }}
##   {{ end }}
## {{ end }}
